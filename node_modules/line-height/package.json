{
  "_args": [
    [
      "line-height@^0.1.1",
      "C:\\Redox\\Test\\redoxSimpleChatMeteor\\node_modules\\react-scrollbar"
    ]
  ],
  "_from": "line-height@>=0.1.1 <0.2.0",
  "_id": "line-height@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/line-height",
  "_npmUser": {
    "email": "todd@twolfson.com",
    "name": "twolfson"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {},
  "_requested": {
    "name": "line-height",
    "raw": "line-height@^0.1.1",
    "rawSpec": "^0.1.1",
    "scope": null,
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-scrollbar"
  ],
  "_resolved": "https://registry.npmjs.org/line-height/-/line-height-0.1.1.tgz",
  "_shasum": "e86705fbf0a6f50607aed65500d69db2d9db37e2",
  "_shrinkwrap": null,
  "_spec": "line-height@^0.1.1",
  "_where": "C:\\Redox\\Test\\redoxSimpleChatMeteor\\node_modules\\react-scrollbar",
  "author": {
    "email": "todd@twolfson.com",
    "name": "Todd Wolfson",
    "url": "http://twolfson.com/"
  },
  "bugs": {
    "url": "https://github.com/twolfson/line-height/issues"
  },
  "dependencies": {
    "computed-style": "~0.1.3"
  },
  "description": "Calculate line-height of an HTML element (IE6 compatible)",
  "devDependencies": {
    "brfs": "0.0.6",
    "browserify": "~2.23.1",
    "chai": "~1.7.2",
    "css-controls": "~0.1.0",
    "domify": "~1.0.0",
    "grunt": "~0.3.17",
    "mocha": "~1.11.0",
    "proclaim": "~1.5.0",
    "testem": "~0.3.12"
  },
  "directories": {},
  "dist": {
    "shasum": "e86705fbf0a6f50607aed65500d69db2d9db37e2",
    "tarball": "http://registry.npmjs.org/line-height/-/line-height-0.1.1.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "https://github.com/twolfson/line-height",
  "keywords": [
    "css",
    "getComputedStyle",
    "line-height",
    "lineHeight"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twolfson/line-height/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/line-height",
  "maintainers": [
    {
      "name": "twolfson",
      "email": "todd@twolfson.com"
    }
  ],
  "name": "line-height",
  "optionalDependencies": {},
  "readme": "# line-height [![Donate on Gittip](http://badgr.co/gittip/twolfson.png)](https://www.gittip.com/twolfson/)\n\nCalculate line-height of an HTML element (IE6 compatible)\n\nThis was created for provide a well-tested module for calculating [line-height][] in pixels for [trunkata][], a line-based truncation library for HTML.\n\n[line-height]: https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n[trunkata]: https://github.com/twolfson/trunkata\n\n[![browser support](https://ci.testling.com/twolfson/line-height.png)](https://ci.testling.com/twolfson/line-height)\n\n## Getting Started\n`line-height` is available via the following:\n\n- [npm][npm], `npm install line-height`\n- [bower][bower], `bower install line-height`\n- [component][component], `component install line-height`\n- [Download via HTTP][download]\n\n[npm]: http://npmjs.org/\n[bower]: http://bower.io/\n[component]: http://component.io/\n[download]: https://raw.github.com/twolfson/line-height/master/dist/line-height.js\n\nFor `npm` and `component`, you can load it in as follows:\n```javascript\nvar lineHeight = require('line-height');\n```\n\nFor `bower` and `http`, you can use vanilla JS\n```html\n<script src=\"components/line-height.js\"></script>\nwindow.lineHeight; // `line-height` is defined on `window` in camelCase\n```\n\nor you can use [AMD][amd]\n\n[amd]: http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n\n```js\nrequire(['line-height'], funtion (lineHeight) { /* code */ });\n```\n\nor [CommonJS][commonjs] syntax (see `npm`/`component` section).\n\n[commonjs]: http://wiki.commonjs.org/wiki/Modules/1.0\n\nOnce you have the module loaded, you can get the `line-height` of any node in the DOM.\n\n```javascript\n// Calculate the `line-height` of the body\nlineHeight(document.body); // 19\n\n// Calculate the `line-height` of an h2\nvar h2 = document.createElement('h2');\ndocument.body.appendChild(h2);\nlineHeight(h2); // 29\n\n// Calculate how many lines tall an element is\nvar div = document.createElement('div');\ndiv.innerHTML = '<p>1</p><p>2</p>';\n(lineHeight(div) / div.offsetHeight); // 2, how trunkata performs its calculations\n```\n\n## Documentation\n`line-height` provides a single function.\n\n```js\nlineHeight(node);\n/**\n * Calculate the `line-height` of a given node\n * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.\n * @returns {Number} `line-height` of the element in pixels\n */\n```\n\n## Solved problems\n### `line-height: normal`\nIn a large amount of browsers, the [computed style][computed-style] for an element's `line-height` is `normal` by default.\n\nIf it is specified by any other means (e.g. ancestor has a `line-height` or the element has a `line-height` specified), it is either a [CSS length][css-length].\n\nTo solve this problem, we create a vanilla element of the same `nodeName` (e.g. `h2` if it is an `h2`), apply the original element's `font-size`, and return the element `offsetHeight`. This is the `height` of `1 line` of the element (i.e. `line-height`).\n\n[computed-style]: https://developer.mozilla.org/en-US/docs/Web/API/window.getComputedStyle\n[css-length]: https://developer.mozilla.org/en-US/docs/Web/CSS/length\n\n### Converting `pt`, `pc`, `in`, `cm`, `mm` to `px`\nIn most browsers, when the `line-height` is specified in `pt`, `pc`, `in`, `cm` or `mm`, the `computedStyle` value is in the same unit.\n\nTo solve this problem, we use the [standard ratios of conversion to pixels][css-length] to make a conversion to pixels.\n\n- 3pt to 4px\n- 1pc to 16px\n- 1in to 96px\n- 2.54cm to 96px\n- 25.4mm to 96px\n\n### `numeric` font-size in IE6\nIn IE6, `numeric` `font-size`s (e.g. `font-size: 2.3`) are returned without a unit.\n\nTo solve this problem, we treat this number as an `em` since it is relative as well. To do that, we set the element's style to `\"numeric value\" + \"em\"`, compute and save the `font-size`, remove the temporary style. This conversion gives us the unit in `pt` which we know how to deal with from before.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## License\nCopyright (c) 2013 Todd Wolfson\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/line-height.git"
  },
  "scripts": {
    "build": "browserify lib/line-height.js --standalone line-height --outfile dist/line-height.js",
    "build-test": "browserify --transform brfs test/line-height_test.js --outfile test/line-height_test.browserify.js",
    "test": "testem ci"
  },
  "testling": {
    "browsers": [
      "chrome/20..latest",
      "chrome/canary",
      "firefox/10..latest",
      "firefox/nightly",
      "ie/6..latest",
      "ipad/6",
      "iphone/6",
      "opera/11.0..latest",
      "opera/next",
      "safari/latest"
    ],
    "files": [
      "test/line-height_test.js"
    ],
    "harness": "mocha"
  },
  "version": "0.1.1"
}
